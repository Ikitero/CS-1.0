// <auto-generated />
using CS_1._0.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CS_1._0.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200204162502_refresh")]
    partial class refresh
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CS_1._0.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CS_1._0.Models.Record", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("RecordDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordTypeId")
                        .HasColumnType("int");

                    b.HasKey("RecordId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("CS_1._0.Models.RecordType", b =>
                {
                    b.Property<int>("RecordTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RecordTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecordTypeId");

                    b.ToTable("RecordTypes");

                    b.HasData(
                        new
                        {
                            RecordTypeId = 1,
                            RecordTypeName = "Slider"
                        },
                        new
                        {
                            RecordTypeId = 2,
                            RecordTypeName = "Header and text"
                        },
                        new
                        {
                            RecordTypeId = 3,
                            RecordTypeName = "Text and image on the left"
                        },
                        new
                        {
                            RecordTypeId = 4,
                            RecordTypeName = "Text and image on the right"
                        });
                });

            modelBuilder.Entity("CS_1._0.Models.Record", b =>
                {
                    b.HasOne("CS_1._0.Models.Category", "Category")
                        .WithMany("Records")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
